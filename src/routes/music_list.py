# src/routes/music_list.py (O Ma√Ætre e Arquivista)

from fastapi import APIRouter, HTTPException, status, Depends, Request
from routes.user import get_current_user_id 
from models.mongo_models import MongoMusic
from database import db_connection

# --- Router do FastAPI ---
music_list_router = APIRouter()

# --- Rotas do Ma√Ætre ---

@music_list_router.get("/musics/{user_id}")
async def get_user_musics(user_id: str):
    """Ma√Ætre buscando o card√°pio pessoal de um cliente espec√≠fico."""
    print(f"ü§µ Ma√Ætre: Consultando o card√°pio pessoal do cliente {user_id}.")
    try:
        musics = await MongoMusic.find_by_user(user_id)
        music_list = [MongoMusic.to_dict(music) for music in musics]
        print(f"‚úÖ Ma√Ætre: Encontrados {len(music_list)} pratos no card√°pio do cliente {user_id}.")
        
        return {
            "status": "success",
            "musics": music_list,
            "total": len(music_list),
        }
    except Exception as e:
        print(f"üö® Ma√Ætre: Erro ao consultar o card√°pio do cliente {user_id}: {e}")
        raise HTTPException(status_code=status.HTTP_500_INTERNAL_SERVER_ERROR, detail="Houve um problema ao buscar o card√°pio deste cliente.")

@music_list_router.get("/musics")
async def get_my_musics(request: Request, current_user_id: str = Depends(get_current_user_id)):
    """Ma√Ætre buscando pratos no card√°pio para o cliente, aplicando seus filtros e prefer√™ncias."""
    try:
        search_filter = {"userId": current_user_id}
        
        query_params = request.query_params
        if query_params:
            print(f"ü§µ Ma√Ætre: Cliente {current_user_id} pediu para ver o card√°pio com prefer√™ncias especiais: {dict(query_params)}")
        else:
            print(f"ü§µ Ma√Ætre: Cliente {current_user_id} pediu para ver seu card√°pio completo.")

        for key, value in query_params.items():
            values = query_params.getlist(key)
            if len(values) > 1:
                search_filter[key] = {"$in": values}
            elif len(values) == 1:
                search_filter[key] = values[0]
        
        print(f"üîç Ma√Ætre: Buscando no livro de receitas com os filtros: {search_filter}")

        if not db_connection.db:
            print("üö® Ma√Ætre: O livro de receitas (banco de dados) est√° inacess√≠vel no momento!")
            raise HTTPException(status_code=status.HTTP_503_SERVICE_UNAVAILABLE, detail="Nosso livro de receitas est√° temporariamente indispon√≠vel.")
            
        cursor = db_connection.db.musics.find(search_filter)
        musics = await cursor.to_list(length=None)
        
        music_list = [MongoMusic.to_dict(music) for music in musics]
        print(f"‚úÖ Ma√Ætre: Encontramos {len(music_list)} pratos que correspondem √†s prefer√™ncias do cliente.")
        
        return {
            "status": "success",
            "filters_applied": search_filter,
            "musics": music_list,
            "total": len(music_list),
        }
    except Exception as e:
        print(f"üö® Ma√Ætre: Houve um problema ao tentar filtrar o card√°pio para o cliente {current_user_id}: {e}")
        raise HTTPException(status_code=status.HTTP_500_INTERNAL_SERVER_ERROR, detail="Houve um problema ao buscar os pratos em nosso card√°pio.")

# --- Fun√ß√£o do Arquivista ---

def add_generated_music(music_data):
    """Fun√ß√£o para adicionar m√∫sica gerada √† lista"""
    music_name_for_log = music_data.get('musicName', 'Sem t√≠tulo')
    print(f"‚úçÔ∏è Arquivista: Recebendo um novo prato da cozinha para registrar: '{music_name_for_log}'.")
    try:
        user_id = music_data.get("userId")
        if user_id:
            # Se create_music tamb√©m for ass√≠ncrono, precisar√° de 'await' quando for chamado em uma fun√ß√£o async
            music = MongoMusic.create_music(user_id, music_data)
            print(f"‚úÖ Arquivista: Prato '{music_name_for_log}' do cliente {user_id} foi registrado com sucesso no livro de receitas (MongoDB).")
            return music
        else:
            print(f"‚ùå Arquivista: Tentativa de registrar um prato sem identifica√ß√£o do cliente. Registro cancelado.")
            return None
    except Exception as error:
        print(f"üö® Arquivista: Falha cr√≠tica ao tentar registrar o prato '{music_name_for_log}' no livro de receitas: {error}")
        return None
