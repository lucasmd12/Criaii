# src/routes/user.py (O Recepcionista)

from fastapi import APIRouter, Depends, HTTPException, status, Header
from typing import Optional
from pydantic import BaseModel, Field

from src.models.mongo_models import MongoUser, generate_token, verify_token
from src.database.database import get_database, DatabaseConnection

# --- Modelos Pydantic para Valida√ß√£o de Entrada ---
class UserCreate(BaseModel):
    username: str
    password: str = Field(..., min_length=6)

class UserLogin(BaseModel):
    username: str
    password: str

# --- Router do FastAPI ---
user_router = APIRouter()

# --- Depend√™ncia para obter o ID do usu√°rio a partir do token (O Crach√° de Cliente) ---
async def get_current_user_id(authorization: Optional[str] = Header(None)):
    """Verifica o crach√° (token) do cliente para dar acesso √†s √°reas restritas."""
    if not authorization or not authorization.startswith("Bearer "):
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Crach√° de acesso (token Bearer) n√£o encontrado na entrada.",
        )
    token = authorization.split(" ")[1]
    user_id = verify_token(token)
    if not user_id:
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Crach√° de acesso (token) inv√°lido ou expirado. Por favor, fa√ßa o login novamente.",
        )
    return user_id

# --- Rotas do Recepcionista ---

@user_router.post("/register", status_code=status.HTTP_201_CREATED)
async def register(user_data: UserCreate, db_manager: DatabaseConnection = Depends(get_database)):
    """Recepcionista registrando um novo cliente no livro de reservas."""
    username = user_data.username.strip()
    print(f"ü§µ Recepcionista: Recebendo um novo cliente para registro: '{username}'")
    
    try:
        # Entregamos a chave do cofre (db_manager) para o m√©todo que cria o usu√°rio.
        user = await MongoUser.create_user(db_manager, username, user_data.password)
        
        if not user:
            print(f"‚ö†Ô∏è Recepcionista: Tentativa de registro com nome j√° existente: '{username}'")
            raise HTTPException(
                status_code=status.HTTP_409_CONFLICT,
                detail="Este nome j√° consta em nosso livro de reservas. Por favor, escolha outro.",
            )
        
        # O ID do usu√°rio √© um objeto ObjectId, precisamos convert√™-lo para string para o token
        user_id_str = str(user["_id"])
        token = generate_token(user_id_str)
        print(f"‚úÖ Recepcionista: Cliente '{username}' registrado com sucesso. Entregando crach√° de acesso.")
        
        return {
            "message": "Bem-vindo ao Alquimista Musical! Seu registro foi um sucesso.",
            "user": MongoUser.to_dict(user),
            "token": token,
        }
    except Exception as e:
        print(f"üö® Recepcionista: Ocorreu um erro inesperado ao tentar registrar o cliente: {e}")
        raise HTTPException(status_code=status.HTTP_500_INTERNAL_SERVER_ERROR, detail="Houve um problema em nosso sistema de registro. Tente novamente.")

@user_router.post("/login")
async def login(user_data: UserLogin, db_manager: DatabaseConnection = Depends(get_database)):
    """Recepcionista verificando a identidade de um cliente que est√° chegando."""
    username = user_data.username.strip()
    print(f"ü§µ Recepcionista: Cliente '{username}' est√° tentando entrar no restaurante.")
    
    try:
        # Entregamos a chave do cofre (db_manager) para o m√©todo que busca o usu√°rio.
        user = await MongoUser.find_by_username(db_manager, username)
        
        if not user or not MongoUser.check_password(user, user_data.password):
            print(f"üö´ Recepcionista: Acesso negado para '{username}'. Credenciais n√£o conferem.")
            raise HTTPException(
                status_code=status.HTTP_401_UNAUTHORIZED,
                detail="Nome de usu√°rio ou senha n√£o conferem com nosso livro de reservas.",
            )
            
        user_id_str = str(user["_id"])
        token = generate_token(user_id_str)
        print(f"üëç Recepcionista: Cliente '{username}' verificado. Entregando novo crach√° de acesso.")
        
        return {
            "message": "Login realizado com sucesso. Bom te ver de volta!",
            "user": MongoUser.to_dict(user),
            "token": token,
        }
    except Exception as e:
        print(f"üö® Recepcionista: Ocorreu um erro inesperado durante o login: {e}")
        raise HTTPException(status_code=status.HTTP_500_INTERNAL_SERVER_ERROR, detail="Houve um problema em nosso sistema de login. Tente novamente.")

@user_router.get("/profile")
async def get_profile(
    current_user_id: str = Depends(get_current_user_id),
    db_manager: DatabaseConnection = Depends(get_database)
):
    """Recepcionista buscando os dados do cliente no livro de reservas."""
    print(f"ü§µ Recepcionista: Buscando informa√ß√µes do cliente com ID: {current_user_id}")
    
    try:
        # Entregamos a chave do cofre (db_manager) para o m√©todo que busca por ID.
        user = await MongoUser.find_by_id(db_manager, current_user_id)
        
        if not user:
            print(f"‚ùì Recepcionista: Cliente com ID {current_user_id} n√£o encontrado no livro de reservas.")
            raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail="N√£o encontramos seus dados em nosso sistema.")
        
        # CORRE√á√ÉO APLICADA AQUI:
        username = user.get('username', 'desconhecido') # Usar .get() √© mais seguro
        print(f"‚úÖ Recepcionista: Informa√ß√µes do cliente '{username}' encontradas.")
        
        return {"user": MongoUser.to_dict(user)}
    except Exception as e:
        print(f"üö® Recepcionista: Erro ao buscar informa√ß√µes do cliente: {e}")
        raise HTTPException(status_code=status.HTTP_500_INTERNAL_SERVER_ERROR, detail="Houve um problema ao buscar suas informa√ß√µes.")

@user_router.get("/users", include_in_schema=False)
async def get_users():
    """Recepcionista informando que a lista de todos os clientes √© confidencial."""
    print("üîê Recepcionista: Tentativa de acesso √† lista completa de clientes foi bloqueada por seguran√ßa.")
    raise HTTPException(status_code=status.HTTP_403_FORBIDDEN, detail="A lista de todos os clientes √© confidencial e n√£o pode ser acessada.")
