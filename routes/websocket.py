# src/routes/websocket.py
# Fun√ß√£o: O Sistema de Comunica√ß√£o em Tempo Real do Restaurante

from fastapi import APIRouter, WebSocket, Depends, WebSocketDisconnect

# --- Inje√ß√£o de Depend√™ncias ---
from dependencies import get_presence_service

# --- Importa√ß√µes de CLASSE para Type Hinting ---
from services.websocket_service import websocket_service
from services.presence_service import PresenceService

# --- Router do FastAPI ---
websocket_router = APIRouter()

@websocket_router.websocket("/ws/{user_id}")
async def websocket_endpoint(
    websocket: WebSocket,
    user_id: str,
    presence_service: PresenceService = Depends(get_presence_service)
):
    """Canal de Comunica√ß√£o Direta Restaurante ‚Üî Cliente"""
    print(f"üîÑ NOVA CONEX√ÉO: Cliente '{user_id}' solicitando canal de comunica√ß√£o direta...")
    
    # O 'websocket_service' agora √© apenas um manipulador de l√≥gica, n√£o um endpoint.
    # A rota do FastAPI √© o verdadeiro ponto de entrada.
    manager = websocket_service
    
    await manager.connect(websocket, user_id)
    
    try:
        # Loop para manter a conex√£o viva e escutar por mensagens (se necess√°rio no futuro)
        while True:
            # O receive_text() aguarda por mensagens do cliente.
            # Se o cliente desconectar, ele levantar√° uma exce√ß√£o.
            await websocket.receive_text()
    except WebSocketDisconnect:
        print(f"üëã Cliente '{user_id}' desconectou do canal.")
    finally:
        # A l√≥gica de desconex√£o agora √© chamada aqui, no final da vida da conex√£o.
        await manager.disconnect(user_id, presence_service)
        print(f"üîö Canal de comunica√ß√£o para cliente '{user_id}' foi fechado.")
