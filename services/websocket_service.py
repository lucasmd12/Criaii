# Arquivo: services/websocket_service.py (VERS√ÉO FINAL E CORRETA)
# Fun√ß√£o: O Gar√ßom do Restaurante - Gerencia a comunica√ß√£o em tempo real com os clientes.

import socketio
from typing import Optional, Dict, Any
from fastapi import WebSocket, WebSocketDisconnect

# Importamos a CLASSE do servi√ßo com o qual ele vai interagir
from services.presence_service import PresenceService

class WebSocketService:
    """
    Servi√ßo de WebSocket que colabora com o PresenceService para um controle de estado robusto.
    """
    def __init__(self):
        # <<< IN√çCIO DA CORRE√á√ÉO DEFINITIVA >>>
        # A configura√ß√£o de CORS √© passada AQUI, na cria√ß√£o do servidor principal.
        # O "*" permite todas as origens, o que √© seguro para come√ßar.
        # Mais tarde, podemos substituir por uma lista espec√≠fica se necess√°rio.
        self.sio = socketio.AsyncServer(
            async_mode='asgi',
            cors_allowed_origins="*" 
        )
        # <<< FIM DA CORRE√á√ÉO DEFINITIVA >>>
        
        self.presence_service: Optional[PresenceService] = None
        self.register_events() # Adicionando a chamada que estava faltando
        print("‚úîÔ∏è  R√°dio do Gar√ßom (WebSocket) pronto para receber conex√µes.")

    def set_presence_service(self, presence_service: PresenceService):
        """
        M√©todo chamado pelo main.py no startup para entregar o "r√°dio"
        de comunica√ß√£o com o Gerente de Sal√£o.
        """
        self.presence_service = presence_service
        print("‚úîÔ∏è  Gar√ßom (WebSocket) recebeu o r√°dio para falar com o Gerente de Sal√£o (PresenceService).")

    def register_events(self):
        """Registra os manipuladores de eventos do Socket.IO."""
        @self.sio.event
        async def connect(sid, environ):
            # Sua l√≥gica de conex√£o aqui
            user_id = environ.get('HTTP_X_USER_ID')
            if not user_id:
                print(f"üîå Conex√£o an√¥nima rejeitada: {sid}")
                return False
            
            await self.sio.save_session(sid, {'user_id': user_id})
            if self.presence_service:
                await self.presence_service.user_connected(user_id, sid)
            print(f"üîå Cliente conectado: {sid}, Usu√°rio: {user_id}")

        @self.sio.event
        async def disconnect(sid):
            # Sua l√≥gica de desconex√£o aqui
            session = await self.sio.get_session(sid)
            user_id = session.get('user_id')
            if user_id and self.presence_service:
                await self.presence_service.user_disconnected(user_id, sid)
            print(f"üîå Cliente desconectado: {sid}, Usu√°rio: {user_id}")

    async def send_personal_message(self, user_id: str, event: str, data: Dict[str, Any]):
        """Envia uma mensagem para um usu√°rio espec√≠fico."""
        # Encontra o SID do usu√°rio para enviar a mensagem
        user_sids = self.presence_service.get_user_sids(user_id)
        if user_sids:
            for sid in user_sids:
                await self.sio.emit(event, data, to=sid)
        else:
            print(f"ü§´ Tentativa de enviar mensagem '{event}' para o cliente {user_id}, mas ele n√£o est√° na mesa.")

# Inst√¢ncia global do servi√ßo WebSocket
websocket_service = WebSocketService()
