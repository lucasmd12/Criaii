# Arquivo: services/websocket_service.py (VERS√ÉO CORRIGIDA PARA FASTAPI ROUTER)
# Fun√ß√£o: O Gar√ßom do Restaurante - Gerencia a comunica√ß√£o em tempo real com os clientes.

import socketio
import asyncio
from typing import Dict, Any, Optional
from fastapi import WebSocket, WebSocketDisconnect

# Importamos a CLASSE do servi√ßo com o qual ele vai interagir
from services.presence_service import PresenceService

class WebSocketService:
    """
    Servi√ßo de WebSocket que colabora com o PresenceService para um controle de estado robusto.
    Agora projetado para ser usado com um APIRouter do FastAPI.
    """
    def __init__(self):
        # A inicializa√ß√£o do servidor Socket.IO √© mantida para compatibilidade com ASGI
        self.sio = socketio.AsyncServer(
            async_mode='asgi',
            cors_allowed_origins="*",
            transports=['polling', 'websocket']
        )
        
        # O Gar√ßom agora tem um canal direto para falar com o Gerente.
        self.presence_service: Optional[PresenceService] = None
        
        # O mapa de conex√µes ativas agora √© a fonte da verdade para envio de mensagens.
        self.active_connections: Dict[str, WebSocket] = {}
        
        # Os eventos agora s√£o gerenciados pelo endpoint, n√£o registrados aqui.

    def set_presence_service(self, presence_service: PresenceService):
        """
        M√©todo chamado pelo main.py no startup para entregar o "r√°dio"
        de comunica√ß√£o com o Gerente de Sal√£o.
        """
        self.presence_service = presence_service
        print("‚úîÔ∏è  Gar√ßom (WebSocket) recebeu o r√°dio para falar com o Gerente de Sal√£o (PresenceService).")

    async def handle_connection(self, websocket: WebSocket, user_id: str):
        """
        Ponto de entrada √∫nico para uma conex√£o WebSocket.
        Gerencia o ciclo de vida completo da conex√£o de um cliente.
        """
        await websocket.accept()
        self.active_connections[user_id] = websocket
        
        if self.presence_service:
            await self.presence_service.set_user_online(user_id)
            print(f"üëç Usu√°rio {user_id} sentou-se √† mesa e foi registrado pelo Gerente de Sal√£o.")
        else:
            print(f"‚ö†Ô∏è Usu√°rio {user_id} conectou, mas o Gerente de Sal√£o n√£o est√° dispon√≠vel.")

        try:
            # Loop para manter a conex√£o viva.
            # No nosso caso, a comunica√ß√£o √© principalmente do servidor para o cliente,
            # ent√£o n√£o precisamos processar muitas mensagens de entrada.
            while True:
                await websocket.receive_text()
        except WebSocketDisconnect:
            print(f"üëã Cliente {user_id} foi embora.")
            # A desconex√£o √© tratada no bloco 'finally'.
        except Exception as e:
            print(f"üö® Erro inesperado na conex√£o do cliente {user_id}: {e}")
        finally:
            # Garante que a limpeza seja feita em qualquer caso de desconex√£o.
            self.active_connections.pop(user_id, None)
            if self.presence_service:
                await self.presence_service.set_user_offline(user_id)
                print(f"üëç Gerente de Sal√£o foi notificado que o cliente {user_id} saiu.")

    async def send_personal_message(self, user_id: str, event: str, data: Dict[str, Any]):
        """
        Envia uma mensagem para um usu√°rio espec√≠fico.
        Agora usa o dicion√°rio de conex√µes ativas do FastAPI.
        """
        if user_id in self.active_connections:
            # O formato padr√£o para o cliente √© um objeto com 'type' e 'payload'
            message_to_send = {"type": event, "payload": data}
            await self.active_connections[user_id].send_json(message_to_send)
        else:
            # Este log √© √∫til para debug, mostrando que tentamos enviar uma mensagem
            # para um cliente que j√° havia desconectado.
            print(f"ü§´ Tentativa de enviar mensagem '{event}' para o cliente {user_id}, mas ele j√° n√£o est√° na mesa.")

    # Seus m√©todos de compatibilidade permanecem, agora usando a nova base mais eficiente.
    # Nenhuma outra parte do c√≥digo que chama esses m√©todos precisa ser alterada.
    async def send_progress_update(self, user_id: str, progress_data: Dict[str, Any]):
        await self.send_personal_message(user_id, 'music_progress', progress_data)
    
    async def send_completion_notification(self, user_id: str, music_data: Dict[str, Any]):
        await self.send_personal_message(user_id, 'music_completed', music_data)
        print(f"‚úÖ Prato finalizado! Notifica√ß√£o de conclus√£o enviada para {user_id}.")
    
    async def send_error_notification(self, user_id: str, error_data: Dict[str, Any]):
        await self.send_personal_message(user_id, 'music_error', error_data)
        print(f"‚ùå Ops! Algo deu errado na cozinha. Notifica√ß√£o de erro enviada para {user_id}.")
    
    async def emit_error(self, user_id: str, error_message: str):
        await self.send_error_notification(user_id, {'error': error_message})
    
    async def emit_progress(self, user_id: str, **kwargs):
        await self.send_progress_update(user_id, kwargs)
    
    async def emit_completion(self, user_id: str, **kwargs):
        await self.send_completion_notification(user_id, kwargs)

# Inst√¢ncia global do servi√ßo WebSocket (mantemos seu padr√£o original)
websocket_service = WebSocketService()
